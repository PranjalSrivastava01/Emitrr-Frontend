{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import Navbar from'./components/Navbar';import CardBlock from'./components/CardBlock';import Toast from'./components/Toast';import NameForm from'./components/NameForm';import LeaderBoard from'./components/LeaderBoard';import backgroundVideo from'./assets/Exploding.mp4';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[toastMessage,setToastMessage]=useState('');const[userName,setUserName]=useState('');const[cards,setCards]=useState([]);const[flippedArray,setFlippedArray]=useState([]);const[points,setPoints]=useState(0);const[updatedPoints,setUpdatedPoints]=useState(0);const[count,setCount]=useState(0);const[gameStarted,setGameStarted]=useState(false);const[allCardsDrawn,setAllCardsDrawn]=useState(false);const generateCards=()=>{const cardTypes=['cat','defuse','exploding','shuffle'];setCards(Array.from({length:5},()=>cardTypes[Math.floor(Math.random()*cardTypes.length)]));};const handleNameSubmit=name=>{setUserName(name);setGameStarted(true);};const handleCardFlip=(index,cardType)=>{const updateCardState=()=>{const newCards=[...cards];newCards.splice(index,1);setCards(newCards);const newFlippedArray=[...flippedArray];newFlippedArray[index]=true;setFlippedArray(newFlippedArray);if(newCards.length===0)setAllCardsDrawn(true);};setTimeout(()=>{switch(cardType){case'defuse':setCount(count+1);setToastMessage('You can defuse an exploding kitten now!');break;case'cat':setToastMessage('Meow! Meow Meow! You are definitely gonna...');break;case'shuffle':setCount(0);setToastMessage('All Cards are shuffled, start from the beginning');generateCards();return;case'exploding':if(count>0){setCount(count-1);setToastMessage('Oops! You defused the bomb, but be cautious!');}else{setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');setGameStarted(false);window.location.reload();}break;default:setToastMessage('All Cards drawn successfully!');}updateCardState();},700);};const fetchUserPoints=async()=>{try{const response=await fetch(\"https://backend-emittr2-h3ou.onrender.com/api/user/points?name=\".concat(userName));if(response.ok){const data=await response.json();setPoints(data);}}catch(error){console.error('Error fetching user points:',error);}};const updateUserPoints=async()=>{try{await fetch('https://backend-emittr2-h3ou.onrender.com/api/user/points',{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:userName})});const response=await fetch(\"https://backend-emittr2-h3ou.onrender.com/api/user/points?name=\".concat(userName));const data=await response.json();setUpdatedPoints(data);}catch(error){console.error('Error updating user points:',error);}};useEffect(()=>{if(gameStarted){generateCards();fetchUserPoints();}},[gameStarted,userName]);useEffect(()=>{if(allCardsDrawn){updateUserPoints();}},[allCardsDrawn,userName]);useEffect(()=>{setFlippedArray(Array(cards.length).fill(false));},[cards]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"video\",{autoPlay:true,loop:true,muted:true,style:{position:'fixed',top:'0',left:'0',width:'100vw',height:'100vh',objectFit:'cover',zIndex:'-1',filter:'blur(10px)'},children:/*#__PURE__*/_jsx(\"source\",{src:backgroundVideo,type:\"video/mp4\"})}),gameStarted?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{points:updatedPoints||points,userName:userName}),/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",children:cards.map((card,index)=>/*#__PURE__*/_jsx(CardBlock,{cardType:card,index:index,onCardFlip:handleCardFlip,flippedArray:flippedArray},index))}),toastMessage&&/*#__PURE__*/_jsx(Toast,{message:toastMessage})]}):/*#__PURE__*/_jsx(NameForm,{onNameSubmit:handleNameSubmit}),allCardsDrawn&&/*#__PURE__*/_jsx(LeaderBoard,{points:points,userName:userName})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","LeaderBoard","backgroundVideo","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","toastMessage","setToastMessage","userName","setUserName","cards","setCards","flippedArray","setFlippedArray","points","setPoints","updatedPoints","setUpdatedPoints","count","setCount","gameStarted","setGameStarted","allCardsDrawn","setAllCardsDrawn","generateCards","cardTypes","Array","from","length","Math","floor","random","handleNameSubmit","name","handleCardFlip","index","cardType","updateCardState","newCards","splice","newFlippedArray","setTimeout","window","location","reload","fetchUserPoints","response","fetch","concat","ok","data","json","error","console","updateUserPoints","method","headers","body","JSON","stringify","fill","className","children","autoPlay","loop","muted","style","position","top","left","width","height","objectFit","zIndex","filter","src","type","map","card","onCardFlip","message","onNameSubmit"],"sources":["C:/Users/PRANJAL/OneDrive/Desktop/Exploding-Kitten-Game/exploding-kittens-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport CardBlock from './components/CardBlock';\r\nimport Toast from './components/Toast';\r\nimport NameForm from './components/NameForm';\r\nimport LeaderBoard from './components/LeaderBoard';\r\nimport backgroundVideo from './assets/Exploding.mp4';\r\n\r\nfunction App() {\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n  const [cards, setCards] = useState([]);\r\n  const [flippedArray, setFlippedArray] = useState([]);\r\n  const [points, setPoints] = useState(0);\r\n  const [updatedPoints, setUpdatedPoints] = useState(0);\r\n  const [count, setCount] = useState(0);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\r\n\r\n  const generateCards = () => {\r\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\r\n    setCards(Array.from({ length: 5 }, () => cardTypes[Math.floor(Math.random() * cardTypes.length)]));\r\n  };\r\n\r\n  const handleNameSubmit = (name) => {\r\n    setUserName(name);\r\n    setGameStarted(true);\r\n  };\r\n\r\n  const handleCardFlip = (index, cardType) => {\r\n    const updateCardState = () => {\r\n      const newCards = [...cards];\r\n      newCards.splice(index, 1);\r\n      setCards(newCards);\r\n\r\n      const newFlippedArray = [...flippedArray];\r\n      newFlippedArray[index] = true;\r\n      setFlippedArray(newFlippedArray);\r\n\r\n      if (newCards.length === 0) setAllCardsDrawn(true);\r\n    };\r\n\r\n    setTimeout(() => {\r\n      switch (cardType) {\r\n        case 'defuse':\r\n          setCount(count + 1);\r\n          setToastMessage('You can defuse an exploding kitten now!');\r\n          break;\r\n        case 'cat':\r\n          setToastMessage('Meow! Meow Meow! You are definitely gonna...');\r\n          break;\r\n        case 'shuffle':\r\n          setCount(0);\r\n          setToastMessage('All Cards are shuffled, start from the beginning');\r\n          generateCards();\r\n          return;\r\n        case 'exploding':\r\n          if (count > 0) {\r\n            setCount(count - 1);\r\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\r\n          } else {\r\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\r\n            setGameStarted(false);\r\n            window.location.reload();\r\n          }\r\n          break;\r\n        default:\r\n          setToastMessage('All Cards drawn successfully!');\r\n      }\r\n      updateCardState();\r\n    }, 700);\r\n  };\r\n\r\n  const fetchUserPoints = async () => {\r\n    try {\r\n      const response = await fetch(`https://backend-emittr2-h3ou.onrender.com/api/user/points?name=${userName}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setPoints(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user points:', error);\r\n    }\r\n  };\r\n\r\n  const updateUserPoints = async () => {\r\n    try {\r\n      await fetch('https://backend-emittr2-h3ou.onrender.com/api/user/points', {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: userName }),\r\n      });\r\n      const response = await fetch(`https://backend-emittr2-h3ou.onrender.com/api/user/points?name=${userName}`);\r\n      const data = await response.json();\r\n      setUpdatedPoints(data);\r\n    } catch (error) {\r\n      console.error('Error updating user points:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameStarted) {\r\n      generateCards();\r\n      fetchUserPoints();\r\n    }\r\n  }, [gameStarted, userName]);\r\n\r\n  useEffect(() => {\r\n    if (allCardsDrawn) {\r\n      updateUserPoints();\r\n    }\r\n  }, [allCardsDrawn, userName]);\r\n\r\n  useEffect(() => {\r\n    setFlippedArray(Array(cards.length).fill(false));\r\n  }, [cards]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Background Video */}\r\n      <video \r\n        autoPlay \r\n        loop \r\n        muted \r\n        style={{\r\n          position: 'fixed',\r\n          top: '0',\r\n          left: '0',\r\n          width: '100vw',\r\n          height: '100vh',\r\n          objectFit: 'cover',\r\n          zIndex: '-1',\r\n          filter: 'blur(10px)',\r\n        }}\r\n      >\r\n        <source src={backgroundVideo} type=\"video/mp4\" />\r\n      </video>\r\n\r\n      {gameStarted ? (\r\n        <>\r\n          <Navbar points={updatedPoints || points} userName={userName} />\r\n          <div className=\"card-container\">\r\n            {cards.map((card, index) => (\r\n              <CardBlock key={index} cardType={card} index={index} onCardFlip={handleCardFlip} flippedArray={flippedArray} />\r\n            ))}\r\n          </div>\r\n          {toastMessage && <Toast message={toastMessage} />}\r\n        </>\r\n      ) : (\r\n        <NameForm onNameSubmit={handleNameSubmit} />\r\n      )}\r\n      {allCardsDrawn && <LeaderBoard points={points} userName={userName} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}