{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRANJAL\\\\OneDrive\\\\Desktop\\\\Exploding-Kitten-Game\\\\exploding-kittens-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CardBlock from './components/CardBlock';\nimport Toast from './components/Toast';\nimport NameForm from './components/NameForm';\nimport LeaderBoard from './components/LeaderBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [points, setPoints] = useState(0);\n  const [updatedPoints, setUpdatedPoints] = useState(0);\n  const [count, setCount] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedArray, setFlippedArray] = useState([]);\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\n  const generateCards = () => {\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\n    setCards(Array.from({\n      length: 5\n    }, () => cardTypes[Math.floor(Math.random() * cardTypes.length)]));\n  };\n  const handleNameSubmit = name => {\n    setUserName(name);\n    setGameStarted(true);\n  };\n  const handleCardFlip = (index, cardType) => {\n    const updateCardState = () => {\n      const newCards = [...cards];\n      newCards.splice(index, 1);\n      setCards(newCards);\n      const newFlippedArray = [...flippedArray];\n      newFlippedArray[index] = true;\n      setFlippedArray(newFlippedArray);\n      if (newCards.length === 0) setAllCardsDrawn(true);\n    };\n    setTimeout(() => {\n      switch (cardType) {\n        case 'defuse':\n          setCount(count + 1);\n          setToastMessage('You can defuse an exploding kitten now!');\n          break;\n        case 'cat':\n          setToastMessage('Meow! one step ahead to win!');\n          break;\n        case 'shuffle':\n          setCount(0);\n          setToastMessage('All Cards are shuffled, start from the beginning');\n          generateCards();\n          return;\n        case 'exploding':\n          if (count > 0) {\n            setCount(count - 1);\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\n          } else {\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\n            setGameStarted(false);\n            window.location.reload();\n          }\n          break;\n        default:\n          setToastMessage('All Cards drawn successfully!');\n      }\n      updateCardState();\n    }, 700);\n  };\n  const fetchUserPoints = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/user/points?name=${userName}`);\n      if (response.ok) {\n        const data = await response.json();\n        setPoints(data);\n      }\n    } catch (error) {\n      console.error('Error fetching user points:', error);\n    }\n  };\n  const updateUserPoints = async () => {\n    try {\n      await fetch('http://localhost:8080/api/user/points', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: userName\n        })\n      });\n      const response = await fetch(`http://localhost:8080/api/user/points?name=${userName}`);\n      const data = await response.json();\n      setUpdatedPoints(data);\n    } catch (error) {\n      console.error('Error updating user points:', error);\n    }\n  };\n  useEffect(() => {\n    if (gameStarted) {\n      generateCards();\n      fetchUserPoints();\n    }\n  }, [gameStarted, userName]);\n  useEffect(() => {\n    if (allCardsDrawn) {\n      updateUserPoints();\n    }\n  }, [allCardsDrawn, userName]);\n  useEffect(() => {\n    setFlippedArray(Array(cards.length).fill(false));\n  }, [cards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        points: updatedPoints || points,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(CardBlock, {\n          cardType: card,\n          index: index,\n          onCardFlip: handleCardFlip,\n          flippedArray: flippedArray\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), toastMessage && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toastMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(NameForm, {\n      onNameSubmit: handleNameSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), allCardsDrawn && /*#__PURE__*/_jsxDEV(LeaderBoard, {\n      points: points,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Iu76OQH9m7KuN7jdkacUgUlK8EY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","CardBlock","Toast","NameForm","LeaderBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","points","setPoints","updatedPoints","setUpdatedPoints","count","setCount","gameStarted","setGameStarted","cards","setCards","flippedArray","setFlippedArray","allCardsDrawn","setAllCardsDrawn","generateCards","cardTypes","Array","from","length","Math","floor","random","handleNameSubmit","name","setUserName","handleCardFlip","index","cardType","updateCardState","newCards","splice","newFlippedArray","setTimeout","setToastMessage","window","location","reload","fetchUserPoints","response","fetch","userName","ok","data","json","error","console","updateUserPoints","method","headers","body","JSON","stringify","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onCardFlip","toastMessage","message","onNameSubmit","_c","$RefreshReg$"],"sources":["C:/Users/PRANJAL/OneDrive/Desktop/Exploding-Kitten-Game/exploding-kittens-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport CardBlock from './components/CardBlock';\r\nimport Toast from './components/Toast';\r\nimport NameForm from './components/NameForm';\r\nimport LeaderBoard from './components/LeaderBoard';\r\n\r\nfunction App() {\r\n  const [points, setPoints] = useState(0);\r\n  const [updatedPoints, setUpdatedPoints] = useState(0);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [cards, setCards] = useState([]);\r\n  const [flippedArray, setFlippedArray] = useState([]);\r\n  const [allCardsDrawn, setAllCardsDrawn] = useState(false);\r\n\r\n  const generateCards = () => {\r\n    const cardTypes = ['cat', 'defuse', 'exploding', 'shuffle'];\r\n    setCards(Array.from({ length: 5 }, () => cardTypes[Math.floor(Math.random() * cardTypes.length)]));\r\n  };\r\n\r\n  const handleNameSubmit = (name) => {\r\n    setUserName(name);\r\n    setGameStarted(true);\r\n  };\r\n\r\n  const handleCardFlip = (index, cardType) => {\r\n    const updateCardState = () => {\r\n      const newCards = [...cards];\r\n      newCards.splice(index, 1);\r\n      setCards(newCards);\r\n\r\n      const newFlippedArray = [...flippedArray];\r\n      newFlippedArray[index] = true;\r\n      setFlippedArray(newFlippedArray);\r\n\r\n      if (newCards.length === 0) setAllCardsDrawn(true);\r\n    };\r\n\r\n    setTimeout(() => {\r\n      switch (cardType) {\r\n        case 'defuse':\r\n          setCount(count + 1);\r\n          setToastMessage('You can defuse an exploding kitten now!');\r\n          break;\r\n        case 'cat':\r\n          setToastMessage('Meow! one step ahead to win!');\r\n          break;\r\n        case 'shuffle':\r\n          setCount(0);\r\n          setToastMessage('All Cards are shuffled, start from the beginning');\r\n          generateCards();\r\n          return;\r\n        case 'exploding':\r\n          if (count > 0) {\r\n            setCount(count - 1);\r\n            setToastMessage('Oops! You defused the bomb, but be cautious!');\r\n          } else {\r\n            setToastMessage('Game Over! You drew an exploding kitten and you have no defuse card.');\r\n            setGameStarted(false);\r\n            window.location.reload();\r\n          }\r\n          break;\r\n        default:\r\n          setToastMessage('All Cards drawn successfully!');\r\n      }\r\n      updateCardState();\r\n    }, 700);\r\n  };\r\n\r\n  const fetchUserPoints = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/api/user/points?name=${userName}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setPoints(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user points:', error);\r\n    }\r\n  };\r\n\r\n  const updateUserPoints = async () => {\r\n    try {\r\n      await fetch('http://localhost:8080/api/user/points', {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: userName }),\r\n      });\r\n      const response = await fetch(`http://localhost:8080/api/user/points?name=${userName}`);\r\n      const data = await response.json();\r\n      setUpdatedPoints(data);\r\n    } catch (error) {\r\n      console.error('Error updating user points:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameStarted) {\r\n      generateCards();\r\n      fetchUserPoints();\r\n    }\r\n  }, [gameStarted, userName]);\r\n\r\n  useEffect(() => {\r\n    if (allCardsDrawn) {\r\n      updateUserPoints();\r\n    }\r\n  }, [allCardsDrawn, userName]);\r\n\r\n  useEffect(() => {\r\n    setFlippedArray(Array(cards.length).fill(false));\r\n  }, [cards]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {gameStarted ? (\r\n        <>\r\n          <Navbar points={updatedPoints || points} userName={userName} />\r\n          <div className=\"card-container\">\r\n            {cards.map((card, index) => (\r\n              <CardBlock key={index} cardType={card} index={index} onCardFlip={handleCardFlip} flippedArray={flippedArray} />\r\n            ))}\r\n          </div>\r\n          {toastMessage && <Toast message={toastMessage} />}\r\n        </>\r\n      ) : (\r\n        <NameForm onNameSubmit={handleNameSubmit} />\r\n      )}\r\n      {allCardsDrawn && <LeaderBoard points={points} userName={userName} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}